<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/aop
             http://www.springframework.org/schema/aop/spring-aop.xsd">

        <!--注册bean  方式一 使用原生spring api切入方式-->
<!--        <bean id="userService" class="com.kuang.service.UserServiceImpl"/>-->
<!--        <bean id="log" class="com.kuang.log.BeforeLog"/>-->
<!--        <bean id="afterLog" class="com.kuang.log.AfterLog"/>-->
<!--        &lt;!&ndash;aop的配置  需要导入aop约束 6 7 行&ndash;&gt;-->
<!--        <aop:config>-->
<!--            &lt;!&ndash;切入点  expression:表达式匹配要执行的方法&ndash;&gt;-->
<!--            <aop:pointcut id="pointcut" expression="execution(* com.kuang.service.UserServiceImpl.*(..))"/>-->
<!--            &lt;!&ndash;执行环绕; advice-ref执行方法 . pointcut-ref切入点&ndash;&gt;-->
<!--            <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>-->
<!--            <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->
<!--        </aop:config>-->


        <!--   方法二-->
<!--        <bean id="userService" class="com.kuang.service.UserServiceImpl"/>-->
<!--        <bean id="diy" class="com.kuang.config.DiyPointCut"/>-->
<!--        &lt;!&ndash;aop的配置   方法二&ndash;&gt;-->
<!--        <aop:config>-->
<!--            &lt;!&ndash;第二种方式：使用AOP的标签实现  自定义切面 ref要引入的类&ndash;&gt;-->
<!--            <aop:aspect ref="diy">-->
<!--                &lt;!&ndash;切入点  expression:表达式匹配要执行的方法&ndash;&gt;-->
<!--                <aop:pointcut id="point" expression="execution(* com.kuang.service.UserServiceImpl.*(..))"/>-->
<!--                <aop:before method="before" pointcut-ref="point"/>-->
<!--                <aop:after method="after" pointcut-ref="point"/>-->
<!--            </aop:aspect>-->
<!--        </aop:config>-->

<!--    方法三-->
<!--    通过aop命名空间的-->
<!--    <aop:aspectj-autoproxy />-->
<!--    声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。-->
<!--    当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，-->
<!--    但具体实现的细节已经被<aop:aspectj-autoproxy />隐藏起来了-->

<!--    <aop:aspectj-autoproxy />-->
<!--    有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为<aop:aspectj-autoproxy poxy-target-class="true"/>时，-->
<!--    表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。-->

<!--    <bean id="userService" class="com.kuang.service.UserServiceImpl"/>-->
<!--    <bean id="annotationPointcut" class="com.kuang.config.AnnotationPointcut"/>-->
<!--    <aop:aspectj-autoproxy/>-->
</beans>